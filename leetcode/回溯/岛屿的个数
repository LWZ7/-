'''
给定一个由 '1'（陆地）和 '0'（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。

示例 1:

输入:
11110
11010
11000
00000

输出: 1
示例 2:

输入:
11000
11000
00100
00011

输出: 3
'''
class Solution:
    res = 0
    
    def helper(self , grid , i , j):
        grid[i][j] = "0"
        if i<len(grid)-1 and grid[i+1][j]=="1":
            grid = self.helper(grid , i+1 , j)
        if i>0 and grid[i-1][j]=="1":
            grid = self.helper(grid , i-1 , j)
        if j>0 and grid[i][j-1]=="1":
            grid = self.helper(grid , i , j-1)
        if j<len(grid[0])-1 and grid[i][j+1]=="1":
            grid = self.helper(grid , i , j+1)
        return grid
        
    def numIslands(self, grid: List[List[str]]) -> int:
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j]=="1":
                    grid[i][j]="0"
                    grid = self.helper(grid , i , j)
                    self.res+=1
        return self.res
