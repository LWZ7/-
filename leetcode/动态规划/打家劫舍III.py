'''
在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为“根”。 除了“根”之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。

计算在不触动警报的情况下，小偷一晚能够盗取的最高金额。

示例 1:

输入: [3,2,3,null,3,null,1]

     3
    / \
   2   3
    \   \ 
     3   1

输出: 7 
解释: 小偷一晚能够盗取的最高金额 = 3 + 3 + 1 = 7.
示例 2:

输入: [3,4,5,1,3,null,1]

     3
    / \
   4   5
  / \   \ 
 1   3   1

输出: 9
解释: 小偷一晚能够盗取的最高金额 = 4 + 5 = 9.
'''
    def rob(self, root: TreeNode) -> int:
        def dfs(root: TreeNode) -> (int, int):  # 返回取根时的最大值和不取根时的最大值
            if not root:
                return 0, 0
            elif not root.left and not root.right:
                return root.val, 0
            left = dfs(root.left)
            right = dfs(root.right)
            return root.val + left[1] + right[1], \
                   max(left[0] + right[0], left[0] + right[1], left[1] + right[0], left[1] + right[1])
        return max(dfs(root))
'''
本来以为层次遍历，求出每一层的和，然后利用斐波那契性质，就可以得到答案，但是发现并不是你取了这一层之后，在它的相邻层就无法再取了，
所以这种解法是错的。然后就是递归，max(当前层+当前层下一层的下一层 ， 当前层的下一层)。
但是这种解法耗时太大，跟斐波那契的递归解法一样。所以还是要用到动态规划，对求到的结果进行记忆，避免重复求值。

'''
